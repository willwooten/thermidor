################## Cargo.toml ##################
[package]
name = "thermidor"
version = "0.1.0"
edition = "2021"

[dependencies]
tokio = { version = "1", features = ["full"] }
petgraph = "0.6"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = "0.4"


################## src/main.rs ##################
mod scheduler;
mod task;
mod workflow;
mod state;

use scheduler::Scheduler;
use task::Task;
use workflow::Workflow;

#[tokio::main]
async fn main() {
    // Create a new workflow
    let mut workflow = Workflow::new();

    // Define tasks
    let task1 = Task::new(1, "Task 1", "echo Hello from Task 1");
    let task2 = Task::new(2, "Task 2", "echo Hello from Task 2");
    let task3 = Task::new(3, "Task 3", "echo Hello from Task 3");
    let task4 = Task::new(4, "Task 4", "echo Hello from Task 4");

    // Add tasks to the workflow and get their NodeIndex
    let node1 = workflow.add_task(task1);
    let node2 = workflow.add_task(task2);
    let node3 = workflow.add_task(task3);
    let node4 = workflow.add_task(task4);

    // Define dependencies:
    // - Task 3 depends on Task 1 and Task 2
    // - Task 4 depends on Task 3
    workflow.add_dependency(node1, node3);
    workflow.add_dependency(node2, node3);
    workflow.add_dependency(node3, node4);

    // Create a scheduler and run the workflow
    let scheduler = Scheduler::new();
    if let Err(err) = scheduler.run(&mut workflow).await {
        eprintln!("Error running workflow: {}", err);
    }
}


################## src/scheduler.rs ##################
use crate::workflow::Workflow;
use petgraph::algo::toposort;
use std::io::Error;

pub struct Scheduler;

impl Scheduler {
    /// Creates a new Scheduler.
    pub fn new() -> Self {
        Self
    }

    /// Runs the tasks in the workflow based on their dependencies.
    pub async fn run(&self, workflow: &mut Workflow) -> Result<(), Error> {
        match toposort(&workflow.graph, None) {
            Ok(order) => {
                for node in order {
                    let task = &mut workflow.graph[node]; // Access the Task instance
                    println!("Running task: {}", task.name);
                    if let Err(err) = task.execute().await {
                        eprintln!("Task '{}' failed: {}", task.name, err);
                    }
                }
                Ok(())
            }
            Err(err) => {
                eprintln!("Cycle detected in workflow: {:?}", err);
                Err(Error::new(std::io::ErrorKind::Other, "Cycle detected in workflow"))
            }
        }
    }
}


################## src/workflow.rs ##################
use petgraph::graph::{DiGraph, NodeIndex};
use crate::task::Task;

pub struct Workflow {
    pub graph: DiGraph<Task, ()>,
}


impl Workflow {
    pub fn new() -> Self {
        Self {
            graph: DiGraph::new(),
        }
    }
    /// Adds a task to the workflow and returns its NodeIndex.
    pub fn add_task(&mut self, task: Task) -> NodeIndex {
        self.graph.add_node(task)
    }

    /// Adds a dependency between two tasks.
    pub fn add_dependency(&mut self, from: NodeIndex, to: NodeIndex) {
        self.graph.add_edge(from, to, ());
    }
}


################## src/state.rs ##################
#[derive(Debug, Clone)]
pub enum TaskState {
    Pending,
    Running,
    Success,
    Failure,
}


################## src/task.rs ##################
use tokio::process::Command;
use std::process::Output;
use crate::state::TaskState;

#[derive(Debug, Clone)]
pub struct Task {
    pub id: usize,
    pub name: String,
    pub command: String,
    pub state: TaskState,
}

impl Task {
    /// Creates a new task with the specified id, name, and command.
    pub fn new(id: usize, name: &str, command: &str) -> Self {
        Self {
            id,
            name: name.to_string(),
            command: command.to_string(),
            state: TaskState::Pending,
        }
    }

    /// Executes the task asynchronously and prints stdout/stderr.
    pub async fn execute(&mut self) -> Result<Output, std::io::Error> {
        self.state = TaskState::Running;
        println!("Executing task {}: {}", self.id, self.name);

        // Split the command into the executable and arguments
        let parts: Vec<&str> = self.command.split_whitespace().collect();
        let (cmd, args) = parts.split_first().unwrap_or((&"", &[]));

        let output = Command::new(cmd)
            .args(args)
            .output()
            .await;

        match &output {
            Ok(result) => {
                if result.status.success() {
                    self.state = TaskState::Success;
                    println!("Task '{}' completed successfully.", self.name);
                    println!("stdout: {}", String::from_utf8_lossy(&result.stdout));
                } else {
                    self.state = TaskState::Failure;
                    eprintln!(
                        "Task '{}' failed with exit code: {:?}",
                        self.name,
                        result.status.code()
                    );
                    eprintln!("stderr: {}", String::from_utf8_lossy(&result.stderr));
                }
            }
            Err(err) => {
                eprintln!("Failed to execute task '{}': {}", self.name, err);
                self.state = TaskState::Failure;
            }
        }

        output
    }
}


